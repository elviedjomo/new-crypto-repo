# version: 0.2

# phases:
#   pre_build:
#     commands:
#       - echo "Logging in to Amazon ECR..."
#       - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 503561459342.dkr.ecr.us-east-1.amazonaws.com
#       - REPOSITORY_URI=503561459342.dkr.ecr.us-east-1.amazonaws.com/crypto-project
#       - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#       - IMAGE_TAG=${COMMIT_HASH:=latest}
#   build:
#     commands:
#       - echo "Building the Docker image..."
#       - docker build -t $REPOSITORY_URI:latest .
#       - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
#   post_build:
#     commands:
#       - echo "Pushing the Docker image..."
#       - docker push $REPOSITORY_URI:latest
#       - docker push $REPOSITORY_URI:$IMAGE_TAG

#       - echo "Setting IMAGE_URI variable..."
#       - export IMAGE_URI="$REPOSITORY_URI:$IMAGE_TAG"

#        # ✅ Use jq for safer JSON creation
#       - echo "Creating JSON output file..."
#       - echo '{}' | jq --arg img "$IMAGE_URI" '.imageURI = $img' > imageDetail.json
#       - echo "Verifying JSON output before uploading..."
#       - cat imageDetail.json

#       - echo "Uploading imageDetail.json to S3..."
#       - aws s3 cp imageDetail.json s3://crypto-app-artifact-bucket/crypto-app-build/imageDetail.json
      
# artifacts:
#   files:
#     - imageDetail.json
#   discard-paths: yes
version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_ACCOUNT_ID: "503561459342"         # <— change if pushing cross-account
    REPOSITORY_NAME: crypto-project
    CONTAINER_NAME: app                     # <— ECS task container name if you use imagedefinitions.json
    PUSH_LATEST: "true"

phases:
  pre_build:
    commands:
      - set -euo pipefail
      - echo "Logging in to Amazon ECR..."
      - REPOSITORY_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${REPOSITORY_NAME}"
      - aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
      # Optional: ensure repo exists (comment out if your role can't create)
      - aws ecr describe-repositories --repository-names "$REPOSITORY_NAME" >/dev/null 2>&1 || aws ecr create-repository --repository-name "$REPOSITORY_NAME" >/dev/null
      - COMMIT_HASH="$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION:-}" | cut -c1-7 || true)"
      - IMAGE_TAG="${COMMIT_HASH:-latest}"
      # Ensure jq exists
      - command -v jq >/dev/null || (echo "Installing jq..." && (yum install -y jq || (apt-get update && apt-get install -y jq)))
  build:
    commands:
      - echo "Building image ${REPOSITORY_URI}:${IMAGE_TAG}"
      - docker build -t "${REPOSITORY_URI}:${IMAGE_TAG}" .
      - |
        if [ "${PUSH_LATEST}" = "true" ]; then
          docker tag "${REPOSITORY_URI}:${IMAGE_TAG}" "${REPOSITORY_URI}:latest"
        fi
  post_build:
    commands:
      - echo "Pushing image(s)..."
      - docker push "${REPOSITORY_URI}:${IMAGE_TAG}"
      - |
        if [ "${PUSH_LATEST}" = "true" ]; then
          docker push "${REPOSITORY_URI}:latest"
        fi
      - IMAGE_URI="${REPOSITORY_URI}:${IMAGE_TAG}"
      - echo "Writing imageDetail.json and imagedefinitions.json..."
      - echo '{}' | jq --arg img "$IMAGE_URI" '.imageUri = $img' > imageDetail.json
      - printf '[{"name":"%s","imageUri":"%s"}]\n' "$CONTAINER_NAME" "$IMAGE_URI" > imagedefinitions.json
      # Optional: upload to S3 (ensure role has s3:PutObject)
      - aws s3 cp imageDetail.json s3://crypto-app-artifact-bucket/crypto-app-build/imageDetail.json
artifacts:
  files:
    - imageDetail.json
    - imagedefinitions.json
  discard-paths: yes
