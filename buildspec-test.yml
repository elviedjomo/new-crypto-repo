# version: 0.2

# env:
#   variables:
#     AWS_DEFAULT_REGION: "us-east-1"
#     S3_BUCKET: "crypto-app-artifact-bucket"  # Your S3 Bucket Name
#     BUILD_FOLDER: "crypto-app-build"   # Folder inside S3 where `imageDetail.json` is stored

# phases:
#   pre_build:
#     commands:
#       - echo "Fetching imageDetail.json from S3 artifacts..."
#       - aws s3 cp s3://$S3_BUCKET/$BUILD_FOLDER/imageDetail.json .

#       - echo "Extracting IMAGE_URI from imageDetail.json..."
#       - IMAGE_URI=$(jq -r '.imageURI' imageDetail.json)
#       - |
#        echo "Using Image URI: $IMAGE_URI"

#       - echo "Logging into Amazon ECR..."
#       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $(echo $IMAGE_URI | cut -d'/' -f1)
#       - echo "ECR login successful."

#   build:
#     commands:
#       - echo "Re-extracting IMAGE_URI..."
#       - IMAGE_URI=$(jq -r '.imageURI' imageDetail.json)  # Extract again

#       - echo "Pulling the Docker image from Amazon ECR..."
#       - docker pull $IMAGE_URI
#       - echo "Docker image pulled successfully."

#       # Start container and run tests
#       - echo "Running tests inside Docker container..."
#       - CONTAINER_ID=$(docker run -d -p 5000:5000 $IMAGE_URI)
#       - |
#        echo "Running container ID: $CONTAINER_ID"

#       # Wait for the service to start
#       - echo "Waiting for the container to be ready..."
#       - sleep 10  # Increased sleep time for stability

#       # Get Docker container IP address
#       - CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
#       - |
#        echo "Container is running at: http://$CONTAINER_IP:5000"

#       # Run API health check
#       - echo "Checking service health..."
#       - curl -sSf http://$CONTAINER_IP:5000/ || (echo "Health check failed!" && exit 1)

#   post_build:
#     commands:
#       - echo "Stopping and removing container..."
#       - docker stop $CONTAINER_ID
#       - docker rm $CONTAINER_ID
#       - echo "Test job completed successfully."
version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: "us-east-1"
    S3_BUCKET: "crypto-app-artifact-bucket"
    BUILD_FOLDER: "crypto-app-build"
    EXTERNAL_PORT: "5000"      # host port
    CONTAINER_PORT: "5000"     # container port the app listens on
    HEALTH_PATH: "/"           # e.g., /health or /healthz if you have one
    FLASK_APP_NAME: "app:app"  # <<< set to your Flask app import path (wsgi:app, main:app, app.py, etc.)

phases:
  pre_build:
    commands:
      - 'set -euo pipefail'
      - 'echo "Fetching imageDetail.json from s3://$S3_BUCKET/$BUILD_FOLDER/imageDetail.json ..."'
      - 'aws s3 cp "s3://$S3_BUCKET/$BUILD_FOLDER/imageDetail.json" .'
      - 'command -v jq >/dev/null || (echo "Installing jq..." && (yum install -y jq || (apt-get update && apt-get install -y jq)))'
      - 'IMAGE_URI=$(jq -r ".imageUri // .imageURI // empty" imageDetail.json)'
      - 'test -n "$IMAGE_URI" && [ "$IMAGE_URI" != "null" ] || { echo "ERROR: imageUri not found"; cat imageDetail.json; exit 1; }'
      - 'echo "Using Image URI: $IMAGE_URI"'
      - 'REGISTRY_HOST=$(echo "$IMAGE_URI" | cut -d"/" -f1)'
      - 'aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$REGISTRY_HOST"'
      - 'HEALTH_URL="http://127.0.0.1:${EXTERNAL_PORT}${HEALTH_PATH}"'
      - 'echo "Health URL set to: $HEALTH_URL"'

  build:
    commands:
      - 'echo "Pulling Docker image $IMAGE_URI"'
      - 'docker pull "$IMAGE_URI"'

      # Safe container name (no colons)
      - 'COMMIT_SHORT=$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION:-}" | cut -c1-7 || true)'
      - 'CONTAINER_NAME="ci-app-${CODEBUILD_BUILD_NUMBER:-0}-${COMMIT_SHORT:-na}"'
      - 'echo "Container name: $CONTAINER_NAME"'

      # 1) Keep container alive with a long sleep as PID 1
      - 'echo "Starting base container (sleep 3600) with port mapping ${EXTERNAL_PORT}:${CONTAINER_PORT} ..."'
      - 'docker run -d --name "$CONTAINER_NAME" -p "${EXTERNAL_PORT}:${CONTAINER_PORT}" "$IMAGE_URI" sleep 3600'
      - 'CONTAINER_ID=$(docker inspect -f "{{.Id}}" "$CONTAINER_NAME") || { echo "Failed to start container"; exit 1; }'
      - 'echo "Container ID: $CONTAINER_ID"'
      - 'trap "docker rm -f $CONTAINER_ID >/dev/null 2>&1 || true" EXIT'

      # 2) Start Flask inside the running container using python -m (more reliable than `flask` shim)
      - 'echo "Launching Flask inside container: FLASK_APP=$FLASK_APP_NAME host=0.0.0.0 port=${CONTAINER_PORT}"'
      - >
        docker exec "$CONTAINER_NAME" sh -lc '
          export PYTHONUNBUFFERED=1;
          export FLASK_APP="$FLASK_APP_NAME";
          rm -f /tmp/app.log /tmp/app.pid 2>/dev/null || true;
          (python -m flask run --host 0.0.0.0 --port "${CONTAINER_PORT}" > /tmp/app.log 2>&1 &) ;
          echo $! > /tmp/app.pid ;
          sleep 1;
          ps -o pid,cmd -p "$(cat /tmp/app.pid 2>/dev/null || echo 0)" || true;
        '

      # Quick diagnostics
      - 'docker ps -a --filter "id=$CONTAINER_ID" --no-trunc || true'
      - 'docker port "$CONTAINER_ID" || true'
      - 'docker exec "$CONTAINER_NAME" sh -lc "head -n 40 /tmp/app.log || true"'

      # 3) Health check loop (localhost on host)
      - 'echo "Waiting for service to be ready at $HEALTH_URL ..."'
      - >
        READY=0;
        for i in $(seq 1 30); do
          if curl -fsS "$HEALTH_URL" >/dev/null; then echo "Health check passed (localhost)."; READY=1; break; fi;
          sleep 2;
        done;
        if [ "$READY" -ne 1 ]; then
          echo "Localhost check failed. Dumping diagnostics...";
          echo "--- /tmp/app.log (tail) ---";
          docker exec "$CONTAINER_NAME" sh -lc "tail -n 200 /tmp/app.log || true";
          echo "--- Flask PID & ps ---";
          docker exec "$CONTAINER_NAME" sh -lc "echo PID=$(cat /tmp/app.pid 2>/dev/null || echo missing); ps aux | grep -E \"flask|gunicorn|uvicorn|python -m flask\" | grep -v grep || true";
          echo "--- Listening ports ---";
          docker exec "$CONTAINER_NAME" sh -lc "(ss -lntp || netstat -lntp) 2>/dev/null || true";
          exit 1;
        fi

  post_build:
    commands:
      - 'echo "Stopping and removing container..."'
      - 'docker rm -f "$CONTAINER_ID" >/dev/null 2>&1 || true'
      - 'echo "Test job completed successfully."'

artifacts:
  files:
    - imageDetail.json
  discard-paths: yes
